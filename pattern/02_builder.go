package main

/*
	Реализовать паттерн «строитель».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.


Паттерн "Билдер" (Builder pattern) является порождающим паттерном проектирования, который используется для создания сложных объектов шаг за шагом. Он позволяет разделить процесс конструирования объекта от его представления, что позволяет создавать различные варианты и представления одного и того же объекта.

Применимость паттерна "Билдер" возникает, когда у вас есть сложный объект, который может иметь множество возможных комбинаций своих свойств, и вы хотите предоставить простой способ создания этих объектов без загрязнения кода множеством конструкторов и параметров.

Плюсы использования паттерна "Билдер":

Упрощение процесса создания объектов: Билдер позволяет создавать сложные объекты шаг за шагом, управляя каждым этапом конструирования. Это делает процесс создания объектов более гибким и понятным.

Изоляция деталей конструирования: Билдер скрывает детали конструирования объектов от клиентского кода, предоставляя ему только удобный интерфейс для настройки свойств объекта. Это позволяет изменять внутреннюю реализацию объектов без воздействия на клиентский код.

Поддержка создания различных вариантов объектов: Билдер позволяет создавать различные варианты объектов, используя один и тот же процесс конструирования. Это особенно полезно, когда у вас есть множество свойств объекта и необходимость в создании разных комбинаций этих свойств.

Минусы использования паттерна "Билдер":

Дополнительный код: Использование билдера требует написания дополнительного кода для определения классов билдера и самого объекта. Это может привести к небольшому увеличению объема кода.

Увеличение сложности: Использование билдера добавляет сложность в процессе создания объектов. Вам потребуется правильно организовать классы билдера и обеспечить их согласованное взаимодействие с объектами.

Реальные примеры использования паттерна "Билдер" в Go (Golang) можно найти во многих библиотеках и фреймворках. Например, популярная библиотека "sqlx" использует билдер для построения SQL-запросов с помощью цепочки методов. Билдер позволяет создавать сложные SQL-запросы, добавляя условия, сортировку, ограничения и другие параметры.
*/

import "fmt"

// структура продукта
type computer struct {
	name string
	cpu  string
}

// интерфейс билдера какого-либо компьютера
type iBuilder interface {
	setName()
	setCpu()
	getComputer() *computer
}

// функция создания какого-либо билдера
func getBuilder(name string) iBuilder {

	switch name {
	case "asus":
		return newAsusComputer()
	case "hp":
		return newHpComputer()
	default:
		return nil
	}
}

// структура директора, который и будет вызывать строительство продукта на самом верхнем уровне
type director struct {
	builder iBuilder
}

// конструктор директора
func newDirector(builder iBuilder) *director {
	return &director{
		builder: builder,
	}
}

// метод смены билдера для директора
func (d *director) setBuilder(builder iBuilder) {
	d.builder = builder
}

// метод создания компьютера
func (d *director) buildComputer() *computer {
	d.builder.setName()
	d.builder.setCpu()
	return d.builder.getComputer()
}

// структура реализующая интерфейс билдера
type asusComputer struct {
	name string
	cpu  string
}

// конструктор компьютера асус
func newAsusComputer() *asusComputer {
	return &asusComputer{}
}

// метод установки name компютера
func (c *asusComputer) setName() {
	c.name = "asus"
}

// метод установка cpu компьютера
func (c *asusComputer) setCpu() {
	c.cpu = "intel 5"
}

// конструктор компьютера с компонентами асус
func (c *asusComputer) getComputer() *computer {
	return &computer{
		name: c.name,
		cpu:  c.cpu,
	}
}

// структура реализующая интерфейс билдера
type hpComputer struct {
	name string
	cpu  string
}

// конструктор компьютера hp
func newHpComputer() *hpComputer {
	return &hpComputer{}
}

// метод установки name компютера
func (c *hpComputer) setName() {
	c.name = "hp"
}

// метод установка cpu компьютера
func (c *hpComputer) setCpu() {
	c.cpu = "amd 7"
}

// конструктор компьютера с компонентами hp
func (c *hpComputer) getComputer() *computer {
	return &computer{
		name: c.name,
		cpu:  c.cpu,
	}
}

// main - клиент
func main() {

	// создание билдера асус
	asusBuilder := getBuilder("asus")

	// инициализация директора
	director := newDirector(asusBuilder)

	// создание компьютера асус используя строителя
	asusComputer := director.buildComputer()

	fmt.Println(asusComputer)

	// создание билдера hp
	hpBuilder := getBuilder("hp")

	// смена билдера у директора
	director.setBuilder(hpBuilder)

	// создание компютера hp используя строителя
	hpComputer := director.buildComputer()

	fmt.Println(hpComputer)
}
