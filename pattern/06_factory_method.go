package main

/*
	Реализовать паттерн «фабрика».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.

Паттерн «Фабрика» (Factory pattern) является одним из порождающих паттернов проектирования, который позволяет создавать объекты определенного типа без явного указания их конкретных классов. Он предоставляет общий интерфейс для создания объектов, но оставляет саму логику создания на уровне подклассов.

Применимость паттерна:

Когда у вас есть общий интерфейс для создания разных типов объектов и необходимо скрыть детали конкретной реализации от клиентского кода.
Когда вы хотите делегировать ответственность по созданию объектов подклассам, чтобы клиентский код не зависел от конкретных классов.
Плюсы паттерна:

Упрощает создание объектов, обеспечивая централизованную точку управления.
Сокращает связанность клиентского кода с конкретными классами, что делает его более гибким и расширяемым.
Позволяет добавлять новые типы объектов, расширяя фабричные методы, без изменения существующего кода.
Минусы паттерна:

Введение новых классов и интерфейсов может усложнить код проекта, особенно при работе с небольшими проектами.
Может привести к избыточному количеству подклассов, если каждый тип объекта требует собственной фабрики.
Примеры использования паттерна «Фабрика» в языке Go (Golang):

database/sql пакет: В Golang для работы с базами данных можно использовать стандартный пакет database/sql. Он предоставляет интерфейс для взаимодействия с различными СУБД. Фабричные методы, такие как Open, OpenDb, Connect, используются для создания соединения с конкретной базой данных без необходимости знать о деталях реализации каждого драйвера.

encoding/json пакет: В этом пакете используется паттерн «Фабрика» для создания Decoder и Encoder объектов. json.NewDecoder и json.NewEncoder являются фабричными методами, которые создают объекты для чтения и записи JSON-данных.

net/http пакет: В Golang стандартный пакет net/http также использует паттерн «Фабрика». Например, метод http.NewRequest является фабричным методом, который создает новый HTTP-запрос.

В этих примерах паттерн «Фабрика» позволяет абстрагировать клиентский код от конкретных реализаций объектов и обеспечивает гибкость при добавлении новых типов объектов или изменении существующих.
*/

import "fmt"

type product interface {
	use()
}

type concreteProduct1 struct{}

func (cp1 *concreteProduct1) use() {
	fmt.Println("use concreteProduct1")
}

type concreteProduct2 struct{}

func (cp2 *concreteProduct2) use() {
	fmt.Println("use concreteProduct2")
}

type factory interface {
	create() product
}

type concreteFactory1 struct{}

func (cf1 *concreteFactory1) create() product {
	return &concreteProduct1{}
}

type concreteFactory2 struct{}

func (cf2 *concreteFactory2) create() product {
	return &concreteProduct2{}
}

func main() {

	cf1 := &concreteFactory1{}
	product1 := cf1.create()
	product1.use()

	cf2 := &concreteFactory2{}
	product2 := cf2.create()
	product2.use()
}
