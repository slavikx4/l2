package main

/*
	Реализовать паттерн «команда».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.

Паттерн "Команда" (Command pattern) является поведенческим паттерном проектирования, который инкапсулирует запрос в объекте и позволяет параметризовать клиентов с различными запросами, организовывать их в очереди или записывать и выполнять операции отмены (undo).

Применимость паттерна "Команда" возникает, когда вы хотите отделить отправителя запроса от получателя запроса и дать возможность клиентам выполнять различные запросы без знания подробностей реализации. Команда позволяет создавать модульный, гибкий и расширяемый код.

Плюсы использования паттерна "Команда":

Отделение отправителя и получателя: Команда позволяет отделить отправителя запроса от получателя, что облегчает добавление новых команд и изменение логики выполнения без изменения клиентского кода.

Возможность отмены операций: Команда может предоставлять механизм отмены выполненных операций. Это особенно полезно, когда требуется поддержка отмены или повторного выполнения определенных действий.

Гибкость и расширяемость: Паттерн "Команда" делает код более гибким и расширяемым. Вы можете добавлять новые команды без изменения существующего клиентского кода, а также комбинировать команды в различные способы.

Минусы использования паттерна "Команда":

Увеличение сложности: Использование команд может увеличить сложность кода. Вам потребуется создавать классы команд и организовывать их в структуры, что может привести к увеличению объема кода и зависимостей между классами.

Дополнительные затраты на память: Каждая команда требует дополнительной памяти для хранения объектов команд и связанных данных. Это может быть проблемой, если у вас есть большое количество команд или ограниченные ресурсы памяти.

Реальные примеры использования паттерна "Команда" можно найти во многих областях программирования. Вот несколько примеров:

Графический интерфейс пользователя (GUI): В GUI команды могут быть использованы для представления пользовательских действий, таких как нажатие кнопок, выпадение меню или перемещение мыши. Каждое действие может быть инкапсулировано в отдельной команде, которая может быть сохранена, отменена или повторена.

Транзакционные системы: В базах данных или других транзакционных системах команды могут представлять операции над данными. Команды могут быть выполнены в рамках транзакции и могут быть отменены, если транзакция необходимо откатить.

Пульты управления: В умных домах или автоматизированных системах команды могут использоваться для управления различными устройствами. Каждая команда представляет определенное действие (включение света, открытие двери и т.д.), которое может быть выполнено по запросу.


*/

import "fmt"

type iCommand interface {
	execute()
}

type concreteCommand struct {
	reciver *reciver
}

func (cc *concreteCommand) execute() {
	cc.reciver.action()
}

type reciver struct{}

func (r *reciver) action() {
	fmt.Println("execute concrete command")
}

type invoker struct {
	command iCommand
}

func (i *invoker) executeCommand() {
	i.command.execute()
}

func main() {
	reciver := &reciver{}
	command := &concreteCommand{reciver: reciver}
	invoker := &invoker{command: command}

	invoker.executeCommand()
}
