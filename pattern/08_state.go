package main

/*
	Реализовать паттерн «состояния».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.

Паттерн «Состояние» (State pattern) является поведенческим паттерном проектирования, который позволяет объекту изменять свое поведение в зависимости от внутреннего состояния. Он позволяет моделировать конечный автомат, где объект может находиться в одном из нескольких возможных состояний, и его поведение будет определяться текущим состоянием.

Применимость паттерна:

Когда у объекта есть большое количество различных состояний, и его поведение сильно зависит от текущего состояния.
Когда код, который контролирует состояния, становится сложным и запутанным из-за большого количества условных операторов.
Плюсы паттерна:

Упрощает код объекта, так как каждое состояние представлено отдельным классом.
Облегчает добавление новых состояний без изменения существующего кода.
Чистая разделенность между различными состояниями делает код более читаемым и поддерживаемым.
Повышает гибкость и расширяемость системы.
Минусы паттерна:

Введение дополнительных классов для каждого состояния может привести к увеличению сложности кода и числу классов в проекте.
Не рекомендуется использовать паттерн «Состояние», если объект имеет небольшое количество и простые состояния.
Примеры использования паттерна «Состояние»:

Автомат торгового терминала: В финансовых системах, таких как торговые терминалы, паттерн «Состояние» может использоваться для моделирования различных состояний системы, например, «Подключение к серверу», «Ожидание данных», «Открытый торговый день». Каждое состояние будет определять поведение системы на этапе своего исполнения.

Игровой движок: В игровых движках паттерн «Состояние» широко используется для управления различными состояниями игрового процесса, такими как «Загрузка», «Меню», «Игровой уровень», «Победа», «Поражение». Каждое состояние определяет, какие действия доступны в игровом процессе и как система будет реагировать на события.

Тикетная система поддержки: При разработке системы управления тикетами поддержки (например, Help Desk) паттерн «Состояние» может использоваться для определения состояний тикетов, таких как «Открытый», «В процессе», «Закрытый». Каждое состояние определяет доступные действия для тикета и его поведение при обработке.

В этих примерах паттерн «Состояние» помогает управлять сложными системами с различными состояниями, делает код более читаемым и поддерживаемым, а также обеспечивает гибкость в добавлении новых состояний или изменении поведения системы без необходимости изменять существующий код.
*/

import "fmt"

// Интерфейс, представляющий состояние
type State interface {
	Handle() State
}

// Структура, представляющая контекст
type Context struct {
	state State
}

// Метод для установки состояния
func (c *Context) setState(state State) {
	c.state = state
}

// Выполнение действия
func (c *Context) request() {
	c.setState(c.state.Handle())
}

// Реализация первого состояния
type ConcreteStateA struct{}

func (s *ConcreteStateA) Handle() State {
	fmt.Println("Выполняется действие в состоянии A")
	return &ConcreteStateB{}
}

// Реализация второго состояния
type ConcreteStateB struct{}

func (s *ConcreteStateB) Handle() State {
	fmt.Println("Выполняется действие в состоянии B")
	return &ConcreteStateA{}
}

func main() {
	// Создание контекста
	context := &Context{}

	// Установка начального состояния
	initialState := &ConcreteStateA{}
	context.setState(initialState)

	// Выполнение действия
	context.request() // Вывод: "Выполняется действие в состоянии A"

	// Изменение состояния и выполнение действия снова
	context.request() // Вывод: "Выполняется действие в состоянии B"
}
