package main

/*
	Реализовать паттерн «стратегия».
Объяснить применимость паттерна, его плюсы и минусы,а также реальные примеры использования данного примера на практике.

Паттерн «Стратегия» (Strategy pattern) является поведенческим паттерном проектирования, который позволяет определить семейство алгоритмов, инкапсулировать каждый из них и делать их взаимозаменяемыми. Паттерн позволяет изменять алгоритмы независимо от клиентского кода, который их использует.

Применимость паттерна:

Когда у вас есть несколько вариантов реализации определенного алгоритма или поведения, которые должны быть выбраны во время выполнения программы.
Когда нужно скрыть детали реализации алгоритма от клиентского кода и обеспечить возможность легкой замены одной стратегии на другую.
Когда класс содержит множество условных операторов, в которых выбирается различное поведение.
Плюсы паттерна:

Уменьшает зависимость между клиентским кодом и конкретными реализациями алгоритмов.
Облегчает добавление новых стратегий или изменение существующих без внесения изменений в клиентский код.
Позволяет выбирать нужную стратегию на основе условий во время выполнения программы.
Улучшает читаемость и поддерживаемость кода, разделяя различные алгоритмы на отдельные классы.
Минусы паттерна:

Усложняет структуру кода, так как требуется создание дополнительных классов для каждой стратегии.
Может привести к увеличению числа классов в проекте, особенно если есть большое количество различных стратегий.
Примеры использования паттерна «Стратегия» в языке Go (Golang):

Сортировка: В стандартной библиотеке Go паттерн «Стратегия» используется в функции sort.Slice. Эта функция принимает срез элементов и функцию-компаратор, которая определяет порядок сортировки. Таким образом, вы можете выбрать различные стратегии сортировки, например, по возрастанию или по убыванию.

Шифрование: В криптографическом пакете crypto Go можно найти примеры использования паттерна «Стратегия». Например, при использовании функций шифрования AES или RSA, вы можете выбрать различные стратегии для шифрования или расшифрования данных.

Роутинг в веб-фреймворке: В некоторых веб-фреймворках на Go, таких как Gin или Echo, паттерн «Стратегия» используется для определения обработчиков маршрутов. Вы можете определить различные обработчики для разных URL-путей или методов HTTP и выбирать нужный обработчик в зависимости от запроса.

В этих примерах паттерн «Стратегия» позволяет легко изменять поведение программы, выбирая различные стратегии во время выполнения. Он помогает разделить алгоритмическую логику от клиентского кода и делает систему гибкой и расширяемой.
*/

import "fmt"

type strategy interface {
	execute(data string)
}

type strategyA struct{}

func (s *strategyA) execute(data string) {
	fmt.Println("execute strategy A")
}

type strategyB struct{}

func (s *strategyB) execute(data string) {
	fmt.Println("execute strategy B")
}

type context struct {
	strategy
}

func (c *context) setStrategy(s strategy) {
	c.strategy = s
}

func (c *context) execute(data string) {
	c.strategy.execute(data)
}

func main() {

	strategyA := &strategyA{}
	strategyB := &strategyB{}

	context := &context{}

	context.setStrategy(strategyA)
	context.execute("strategy")

	context.setStrategy(strategyB)
	context.execute("strategy")
}
